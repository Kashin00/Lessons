import Foundation

/*:
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º

–í —ç—Ç–æ–º —Ä–∞–∑—Ä–µ–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- —á—Ç–æ —Ç–∞–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º
- –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã —Ü–∏–∫–ª—ã

  `while` _condition_ {\
    _statements_\
   }

  `repeat` {\
    _statements_\
    } _while_ condition


  `for` _value_ `in` _range_ {\
    _statements_\
    }

- —á—Ç–æ —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API

 –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏:
- [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html)
- [–¶–∏–∫–ª For in](https://www.avanderlee.com/swift/loops-swift/)
- [–¶–∏–∫–ª—ã for, while, repeat](https://www.avanderlee.com/swift/loops-swift/)
- [For each](https://developer.apple.com/documentation/swift/array/1689783-foreach)
- [Statements](https://docs.swift.org/swift-book/ReferenceManual/Statements.html)
- [Conditional Statements](https://learnappmaking.com/swift-conditionals-if-statement-how-to/)
- [–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API](https://www.hackingwithswift.com/example-code/language/how-to-use-available-to-check-for-api-availability)

–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:

#### –ó–∞–¥–∞–Ω–∏–µ 1
 - –û–±—å—è–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `n` –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–µ  –ª—é–±—ã–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var n = 5
/*:
 - –ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Ñ—Ä–∞–∑—É _I like Swift!_ `n` —Ä–∞–∑.
 
 - Note: üëÜ _–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª—ã_ `for` _–∏–ª–∏_ `while`
*/
/*:
 
 - Example: üòâ
_Input:_\
var n = 3\
_Output:_\
 I like Swift!\
 I like Swift!\
 I like Swift!
 */

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
for _ in 1...n {
    print("I like Swift!")
}
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2
 
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–µ `n` –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª (_–∫–≤–∞–¥—Ä–∞—Ç - –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ —Å–µ–±—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 4 = 2 * 2_).
 
 - Example: üòâ
_Input:_\
n = 5\
 _Output_:\
 1\
 4\
 9\
 16\
 25
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
for i in 1...n {
    print(i * i)
}
/*:
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —á–∏—Å–ª–∞ `2`, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã `n`.
 
 - Example: üòâ
 _Input:_\
n = 100\
 _Output:_\
 2\
 4\
 8\
 16\
 32\
 64
 */
 // –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var power = 0
while power <= n {
    print(pow(2,power))
    power += 1
}


/*:
 - –ù–∞—Ä–∏—Å—É–π –≤ –∫–æ–Ω—Å–æ–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç –∏–∑ `n` –Ω–∞ `n` –∑–≤–µ–∑–¥–æ—á–µ–∫ (‚≠ê)
 - Example: üòâ
 _Input:_\
n = 4\
 _Output:_\
 ‚≠ê‚≠ê‚≠ê‚≠ê\
 ‚≠ê‚≠ê‚≠ê‚≠ê\
 ‚≠ê‚≠ê‚≠ê‚≠ê\
 ‚≠ê‚≠ê‚≠ê‚≠ê
 
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var index = 0
var arrayOfString = [String]()
var someStr = ""

repeat {
    for _ in 0...n {
        someStr.append("*")
    }
    arrayOfString.append(someStr)
    someStr = ""
    index += 1
} while index < n

arrayOfString.forEach { print($0) }

/*:
 - –ù–∞—Ä–∏—Å—É–π –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ `n` –∑–≤–µ–∑–¥–æ—á–µ–∫ (‚≠ê)
 - Example: üòâ
 _Input:_\
n = 4\
 _Output:_\
 ‚≠ê\
 ‚≠ê‚≠ê\
 ‚≠ê‚≠ê‚≠ê\
 ‚≠ê‚≠ê‚≠ê‚≠ê
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

var iterator = 0
var ar = [String]()
var str = ""

repeat {
    str.append("*")
    ar.append(str)
    iterator += 1
} while iterator < n

ar.forEach { print($0) }

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 3:
 - –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤ –∏–∑ 20-30 –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.
 - –°–¥–µ–ª–∞–π –ª–∏–Ω–µ–π–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (linear sort).
 - –°–¥–µ–ª–∞–π—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—É–∑—ã—Ä—å–∫–æ–º (bubble sort).
 - –°–¥–µ–ª–∞–π—Ç–µ –±—ã—Å—Ç—Ä—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É  (quick sort).
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var array = [1,2,4,5,8,6,45,23,432,23,6,34,12,21,65,42,97,67,3,7,9]

//–ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è

func bubbleSort(_ arr: [Int]) -> [Int] {
    
    var array = arr
    
    for _ in 0..<array.count - 1 {
        
        for j in 0..<array.count - 1 {
            
            if array[j] > array[j + 1] {
                
                let temp = array[j]
                array[j] = array[j + 1]
                array[j + 1] = temp
            }
            
        }
        
    }
    return array
}


//–±—ã—Å—Ç—Ä–∞—è

func quicksortNaive(_ array: [Int]) -> [Int] {
    guard array.count > 1 else {
      return array
    }
    let pivot = array[array.count / 2]
    let less = array.filter { $0 < pivot }
    let equal = array.filter { $0 == pivot }
    let greater = array.filter { $0 > pivot }
    return quicksortNaive(less) + equal + quicksortNaive(greater)
  }

// –ª–∏–Ω–µ–π–Ω–∞—è
for index in 1..<array.count {
    var jIndex = index - 1
    let value = array[index]

    while jIndex >= 0 && value < array[jIndex] {
        array[jIndex + 1] = array[jIndex]
        jIndex -= 1
    }
    array[jIndex + 1] = value
}
print(array)
/*:
---
### –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:

#### –ó–∞–¥–∞–Ω–∏–µ 4:
 - –°–æ–∑–¥–∞–π 10 —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç—Ä–∞–Ω. –û–±—ä—è–≤–∏ –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∏.
 - –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫–∏: –µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –±–æ–ª–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –¥–æ–±–∞–≤—å –µ—ë –≤ –º–∞—Å—Å–∏–≤. –ù–æ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –ê - –∑–∞–º–µ–Ω–∏ —ç—Ç—É –±—É–∫–≤—É –Ω–∞ –¥—Ä—É–≥—É—é –∏ –¥–æ–±–∞–≤—å –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
var countryArray = [String]()

func checkString(_ string: String) {
    
    var string = string
    
    if string.count > 5 && !string.contains("A") {
        countryArray.append(string)
    }else if string.contains("A") {
        for (index, item) in string.enumerated() {
             
            if item == "A" {
                
                string.remove(at: string.index(string.startIndex, offsetBy: index))
                string.insert("B", at: string.index(string.startIndex, offsetBy: index))
                countryArray.append(string)
            }
        }
    }
}

var ukraine = "Ukraine"
var albania = "lbAnia"
var poland = "Poland"
var argentina = "Argentina"
var czech = "Czech"
var slovakia = "Slovakia"
var austria = "Austria"
var germany = "Germany"
var greenland = "greenland"
var canada = "Canada"

checkString(ukraine)
checkString(albania)
checkString(poland)
checkString(argentina)
checkString(czech)
checkString(slovakia)
checkString(austria)
checkString(germany)
checkString(greenland)
checkString(canada)


print(countryArray)
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5:
 - –°–æ–∑–¥–∞–π —Å—Ç—Ä–æ–∫–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É word –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–µ –ª—é–±—ã–º —Å–ª–æ–≤–æ–º.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–≥—Ä–∞–º–º–æ–π –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç
*/
/*:
- Note: üëÜ _–ò–∑–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤_\
*/
/*:
- Example: üòâ\
_Input:_\
let word ="Password"\
_Output:_\
false
*/
/*:
- Example: üòâ\
_Input:_\
let word ="Algorism"\
_Output:_\
 True
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let word = "constant"

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5:
 - –°–æ–∑–¥–∞–π —Å—Ç—Ä–æ–∫–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É word –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –µ–µ –ª—é–±—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
 - –ü–æ–≤—Ç–æ—Ä–∏ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ 3 —Ä–∞–∑–∞.
 - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 */
/*:
- Example: üòâ\
_Input:_\
let word ="Hello"\
_Output:_\
 "hhheeellllllooo"
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
let wordd = "hello"
var newWordd = ""

wordd.forEach {
    for _ in 1...3 {
        newWordd += String($0)
    }
}
print(newWordd)

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 6:
 - –û–±—å—è–≤–∏ –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—é—â–∏–π –∏–∑ —Å—Ç—Ä–æ–∫ –∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
 - –£–¥–∞–ª–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏.
 - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 */
/*:
- Example: üòâ\
_Input:_\
let array =[1, 2, "a", "b"] \
_Output:_\
 [1, 2]
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:


//: [–ù–∞–∑–∞–¥: –ö–æ–ª–ª–µ–∫—Ü–∏–∏. –ú–∞—Å—Å–∏–≤—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5  |  [–í–ø–µ—Ä–µ–¥:  –§—É–Ω–∫—Ü–∏–∏](@next)
