import Foundation
/*:
# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- —á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–Ω–∏ —Ä–µ—à–∞—é—Ç
- –∫–∞–∫–∏–µ –±—ã–≤–∞—é—Ç –∏—Ö –≤–∏–¥—ã –∏ –∫–∞–∫ –∏—Ö —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ —è–∑—ã–∫–µ Swift

–ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è —Ä–µ—à–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º.
–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–µ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, –∞ –æ–±—â—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ—â—ë –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –Ω—É–∂–¥—ã –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ö–≤–∞—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã.

–°–∞–º—ã–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ‚Äî –∏–¥–∏–æ–º—ã. –û–Ω–∏ –Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–∏–º–µ–Ω–∏–º—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –°–∞–º—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ. –û–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º.  –ú–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã:
- –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ (—Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å, –ø—Ä–æ—Ç–æ—Ç–∏–ø, –æ–¥–∏–Ω–æ—á–∫–∞) - –±–µ—Å–ø–æ–∫–æ—è—Ç—Å—è –æ –≥–∏–±–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- —Å—Ç—É–∫—Ç—É—Ä–Ω—ã–µ (–∞–¥–∞–ø—Ç–µ—Ä, –º–æ—Å—Ç, –∫–æ–º–ø–æ–Ω–æ–≤—â–∏–∫, –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Ñ–∞—Å–∞–¥, –ª–µ–≥–∫–æ–≤–µ—Å, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å) - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
- –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ (—Ü–µ–ø–æ—á–∫–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –∫–æ–º–∞–Ω–¥–∞, –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –ø–æ—Å—Ä–µ–¥–Ω–∏–∫, —Å–Ω–∏–º–æ–∫, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —à–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å) - –∑–∞–±–æ—Ç—è—Ç—Å—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏.

 –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:
- [–§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥](https://refactoring.guru/ru/design-patterns/factory-method)
- [–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞](https://refactoring.guru/ru/design-patterns/abstract-factory)
- [–°—Ç—Ä–æ–∏—Ç–µ–ª—å](https://refactoring.guru/ru/design-patterns/builder)
- [–ü—Ä–æ—Ç–æ—Ç–∏–ø](https://refactoring.guru/ru/design-patterns/prototype)
- [–î–µ–∫–æ—Ä–∞—Ç–æ—Ä](https://refactoring.guru/ru/design-patterns/decorator)
- [–ê–¥–∞–ø—Ç–µ—Ä](https://refactoring.guru/ru/design-patterns/adapter)
- [–ú–æ—Å—Ç](https://refactoring.guru/ru/design-patterns/bridge)
- [–¶–µ–ø–æ—á–∫–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π](https://refactoring.guru/ru/design-patterns/chain-of-responsibility)
- [–ö–æ–º–∞–Ω–¥–∞](https://refactoring.guru/ru/design-patterns/command)

–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
#### –ó–∞–¥–∞–Ω–∏–µ 1
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–∏—Ü—Ü—ã. –ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –æ–±—å–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–∏—Ü—Ü—É —Å —Å—ã—Ä–æ–º, —Ç–æ —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞—Å—Ç –æ–±—å–µ–∫—Ç CheesePizza,  –∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–∏—Ü—Ü—É —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ - –æ–±—å–µ–∫—Ç PepperoniPizza
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
enum TypeOfPizza {
    
    case cheese
    case pepperoni
}

protocol Pizza {
    func pizzaInfo()
}

class PepperoniPizza: Pizza {
    func pizzaInfo() {
        print("Pizza with pepperoni")
    }
}

class CheesePizza: Pizza {
    func pizzaInfo() {
        print("Pizza with cheese")
    }
}

class Factory {
        
    static func createPizza(with ingrediend: TypeOfPizza) -> Pizza {
        
        switch ingrediend {
        case .cheese:
            return CheesePizza()
        case .pepperoni:
            return PepperoniPizza()
        }
    }
}
    
let visitir = Factory.createPizza(with: .cheese)
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–æ–¥–∞–∂–µ–π —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è.  –û—Ç —Ç–∏–ø–∞ (–≤–µ–ª–æ—Å–∏–ø–µ–¥, –∞–≤—Ç–æ–º–æ–±–∏–ª—å,  —ç–ª–µ–∫—Ç–æ—Ä–æ - —Å–∞–º–æ–∫–∞—Ç, —Å–∫—É—Ç–µ—Ä, –º–æ—Ç–æ—Ü–∏–∫–ª) –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–≤–∏—Å–∏—Ç –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ,  –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–Ω–æ–≤–æ–µ –∏ –±/y), —Ç–∏–ø–æ–º –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ (–Ω–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç, –±–µ–Ω–∑–∏–Ω, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ) –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏. –ù–∞–ø–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è  —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –∞–±—Å—Ç—Ä–∞–∫—Ç—É—é —Ñ–∞–±—Ä–∏–∫—É_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

protocol Vehicle {
    
    var condition: String {get}
    var fuel: String {get}
    var maxPeople: Int {get}
    func printDescription()
}

class Bycicle: Vehicle {
    var condition: String = "new"
    
    var fuel: String = "no one"
    
    var maxPeople: Int = 1
    
    func printDescription() {
        print("condition:", condition, "\n", "fuel:", fuel, "\n", "maxPeople:", maxPeople)
    }
}

class Car: Vehicle {
    var condition: String = "new"
    
    var fuel: String = "petrol"
    
    var maxPeople: Int = 5
    
    func printDescription() {
        print("condition:", condition, "\n", "fuel:", fuel, "\n", "maxPeople:", maxPeople)
    }
}
class Scooter: Vehicle {
    var condition: String = "new"
    
    var fuel: String = "petrol"
    
    var maxPeople: Int = 2
    
    func printDescription() {
        print("condition:", condition, "\n", "fuel:", fuel, "\n", "maxPeople:", maxPeople)
    }
}

class ElectricScooter: Vehicle {
    var condition: String = "new"
    
    var fuel: String = "electricity"
    
    var maxPeople: Int = 2
    
    func printDescription() {
        print("condition:", condition, "\n", "fuel:", fuel, "\n", "maxPeople:", maxPeople)
    }
}

class Bike: Vehicle {
    var condition: String = "new"
    
    var fuel: String = "petrol"
    
    var maxPeople: Int = 2
    
    func printDescription() {
        print("condition:", condition, "\n", "fuel:", fuel, "\n", "maxPeople:", maxPeople)
    }
}

class UsedBike: Bike {
    
    override init() {
        super.init()
        self.condition = "used"
    }
}
class UsedCar: Car {
    override init() {
        super.init()
        self.condition = "used"
    }
}
class UsedScooter: Scooter {
    override init() {
        super.init()
        self.condition = "used"
    }
}
class UsedElectricScooter: ElectricScooter {
    override init() {
        super.init()
        self.condition = "used"
    }
}

class UsedBycicle: Bycicle {
    override init() {
        super.init()
        self.condition = "used"
    }
}


protocol AbstractFactory {
    
    func createBycicle() -> Vehicle
    func createBike() -> Vehicle
    func createCar() -> Vehicle
    func createScooter() -> Vehicle
    func createElectricScooter() -> Vehicle
}

class NewVehicle: AbstractFactory {
    func createBycicle() -> Vehicle {
        return Bycicle()
    }
    
    func createBike() -> Vehicle {
        return Bike()
    }
    
    func createCar() -> Vehicle {
        return Car()
    }
    
    func createScooter() -> Vehicle {
        return Scooter()
    }
    
    func createElectricScooter() -> Vehicle {
        return ElectricScooter()
    }
}

class UsedVehicle: AbstractFactory {
    func createBycicle() -> Vehicle {
        return UsedBycicle()
    }
    
    func createBike() -> Vehicle {
        return UsedBike()
    }
    
    func createCar() -> Vehicle {
        return UsedCar()
    }
    
    func createScooter() -> Vehicle {
        return UsedScooter()
    }
    
    func createElectricScooter() -> Vehicle {
        return UsedElectricScooter()
    }
}
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 3
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å–≤—è–∑–∞–Ω —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ê–≤—Ç–æ–º–æ–±–∏–ª—å - —ç—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π –æ–±—å–µ–∫—Ç, —Ç–∞–∫ –∫–∞–∫ –º–∞—à–∏–Ω—ã  –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è —Ç–∏–ø–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–¥–µ–Ω–∏–π, –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∏–ª–∏ –Ω–µ –∏–º–µ—Ç—å GPS –∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–π, –∫—Ä–æ–º–µ —Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≥–æ—Ä–æ–¥—Å–∫–∏–º–∏, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –∏ –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∞–º–∏. –†–µ–∞–ª–∏–∑—É–π —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç  –ø–æ—ç—Ç–∞–ø–Ω–æ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å  –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å  —Å–∏–¥–µ–Ω–∏—è,  –¥–≤–∏–≥–∞—Ç–µ–ª—å, –∫—Ä–∞—Å–∏—Ç—å –∫—É–∑–æ–≤  –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ).
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:


/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 4
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å–≤—è–∑–∞–Ω —Å  —Ä–∞–±–æ—Ç–æ–π –∫–æ—Ñ–µ–π–Ω–∏. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∫ –∫–æ—Ñ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –Ω–∞–ø–∏—Ç–∫–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —ç—Ç–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞.
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
protocol CoffeProtocol {
    
    func getPrice() -> Int
    func getDescription() -> String
}

class Coffe: CoffeProtocol {

    func getPrice() -> Int {
        return 60
    }
    
    func getDescription() -> String {
        return "Coffe with milk"
    }
}

class CoffeDecorator: CoffeProtocol {
 
    private var decoratorType: CoffeProtocol

    required init(decorator: CoffeProtocol) {
        self.decoratorType = decorator
    }
    
    func getPrice() -> Int {
        return decoratorType.getPrice()
    }
    
    func getDescription() -> String {
        return decoratorType.getDescription()
    }
}

class CoffeWithCoconutMilk: CoffeDecorator {
    
    override func getPrice() -> Int {
        return super.getPrice() + 50
    }
    
    override func getDescription() -> String {
        return "Coffe with coconut milk"
    }
}

var coffe = Coffe()
var withCoconut = CoffeWithCoconutMilk(decorator: coffe)
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∫–∏–π —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º  —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–π –∫–ª–∏–µ–Ω—Ç. –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–≤–æ–π –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –ø–æ–Ω—è—Ç–Ω–æ–º –µ–º—É —è–∑—ã–∫–µ.
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω –∞–¥–∞–ø—Ç–µ—Ä_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
class Date {
    
     func tellDate()  {
        print("25 ŸäŸÜÿßŸäÿ±")
    }
}

class Adaptee {
    
    func converDate() {
        print("25 —è–Ω–≤–∞—Ä—è")
    }
}

class DateAdapter: Date {
    
    let adaptee: Adaptee
    
    init(adaptee: Adaptee) {
        self.adaptee = adaptee
    }
    
    override func tellDate() {
        adaptee.converDate()
    }
    
}

 var date = Date()
date.tellDate()
var dataAdapter = DateAdapter(adaptee: Adaptee())
dataAdapter.tellDate()
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 6
- –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –Ω–µ–∫–∏–π –∫–æ–Ω–≤–µ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç  —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–µ–≥–æ –ø–æ–ø–∞–¥–∞—é—Ç. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤: –ø–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É, –±—É–º–∞–≥—É –∏ —Å—Ç–µ–∫–ª–æ. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–µ–¥–º–µ—Ç, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏. –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω "—É–º–µ–µ—Ç" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Ç–æ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É. –ï—Å–ª–∏ –∂–µ –Ω–∏–∫—Ç–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Ç–æ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –≤ –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –ø–æ–ø–∞—Å—Ç—å "–≤ —Ä—É–∫–∏"  –æ–±—å–µ–∫—Ç—É "–°–∫–ª–∞–¥", –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª—å—à–µ —É–∂–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç, –∞ —Å—Ç–∞–≤–∏—Ç –Ω–∞ –Ω–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä.
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ü–µ–ø–æ—á–∫–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π_
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:

protocol HandlerProtocol: class {
    
    var nextHandler: HandlerProtocol? { get set }
    func setNext(handler: HandlerProtocol) -> HandlerProtocol
    func handle(request: String) -> String?
}

extension HandlerProtocol {
    
    func setNext(handler: HandlerProtocol) -> HandlerProtocol {
        nextHandler = handler
        return handler
    }
}
class FoodHandler: HandlerProtocol {
    var nextHandler: HandlerProtocol?
    

    
    func handle(request: String) -> String? {
        if request == "food waste" {
            
            return "Food handler handeled \(request)"
        } else {
            
            return nextHandler?.handle(request: request)
        }
    }
}

class PaperHandler: HandlerProtocol {
    var nextHandler: HandlerProtocol?
    
    func handle(request: String) -> String? {
        if request == "paper" {
            
            return "Paper handler handeled \(request)"
        } else {
            return nextHandler?.handle(request: request)
        }
    }
}

class GlassHandler: HandlerProtocol {
    var nextHandler: HandlerProtocol?
    
    func handle(request: String) -> String? {
        if request == "glass" {
            
            return "Glass handler handeled \(request)"
        } else {
            return nextHandler?.handle(request: request)
        }
    }
}

class ElectricHandler: HandlerProtocol {
    var nextHandler: HandlerProtocol?
    
    func handle(request: String) -> String? {
        if request == "electric" {
            
            return "Electric handler handeled \(request)"
        } else {
            return nextHandler?.handle(request: request)
        }
    }
}
var wareHouse = [String]()

class Recycle {
    
    static func handle(with handler: HandlerProtocol) {
        
        let request = ["paper", "glass"]
        
        request.forEach {
            
            guard let result = handler.handle(request: $0) else {
                wareHouse.append($0)
                return
            }
            
            print(result)
        }
    }
}

let foodHandler = FoodHandler()
let glassHandler = GlassHandler()
let paperHandler = PaperHandler()
let electricHandler = ElectricHandler()

foodHandler.setNext(handler: glassHandler).setNext(handler: paperHandler).setNext(handler: electricHandler)

Recycle.handle(with: foodHandler)


/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 7
 - –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Ç–≤–æ–π –º–æ–¥—É–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏ –ü–û.
 - Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–∞–Ω–¥–∞_
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
    

//: [–ù–∞–∑–∞–¥:  –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 14] 



