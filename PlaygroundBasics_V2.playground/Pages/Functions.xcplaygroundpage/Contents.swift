import Foundation
/*:
# –§—É–Ω–∫—Ü–∏–∏

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã —É–∑–Ω–∞–µ—à—å:
- —á—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –∫–∞–∫ –∏—Ö –æ–±—å—è–≤–ª—è—Ç—å –∏ –≤—ã–∑—ã–≤–∞—Ç—å
- —á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- —á—Ç–æ —Ç–∞–∫–æ–µ —è—Ä—ã–ª–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏:
- [–§—É–Ω–∫—Ü–∏–∏](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#)

–ó–∞–∫—Ä–µ–ø–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:

#### –ó–∞–¥–∞–Ω–∏–µ 1
 
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _calculateMin_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤  –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ `Int` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∏–∑ –Ω–∏—Ö.
 - Example: üòâ\
 _Function Call:_\
 calculateMin(1,2)\
 _Output:_\
 Min: 1
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func calculateMin(_ firstValue: Int, _ secondValue: Int) -> Int {
    if firstValue > secondValue {
        return secondValue
    } else {
        return firstValue
    }
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 2
 
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _countDown_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä `n` —Ç–∏–ø–∞ `Int`.
 - –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å  —á–∏—Å–ª–∞ –æ—Ç _n_ –¥–æ 1 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ª–æ–≤–æ _GO!_
 - Note: üëÜ _–î–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sleep(1)_
 */
/*:
 - Example: üòâ\
 _Function Call:_\
 coutdown(3)\
 _Output:_\
 3\
 2\
 1\
 GO!
 */

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func countDown(_ n: Int) {
     var counter = n
        
     while counter >= 1{
        
        sleep(1)
        print(counter)
        
        if counter == 1 {
            print("GO!")
        }
        counter -= 1
    }
        
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 3
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _repeatPrint_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–æ–∫—É _s_ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ _n_. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, _n_ —Ä–∞–∑.
 - Example: üòâ\
 _Function Call:_\
 repeatPrint(s: "Hi, NIX", n:2)\
 _Output:_\
 Hi, NIX\
 Hi, NIX
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func repeatPrint(_ s: String, _ n: Int) {
    var counter = n
    
    while counter > 0 {
        print(s)
        counter -= 1
    }
}
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 4
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _reverse_, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
 - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 - Example: üòâ\
 _Function Call:_\
 reverse([1, 2, 3])\
 _Output:_\
 [3, 2, 1]
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func reverse(array: [Int]) {
    let reversedArray = Array(array.reversed())
    print(reversedArray)
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 5
 - –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é _factorial_, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç  –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ _n_ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª.
 - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 - Note: üëÜ _–§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ n - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\
 1! = 1\
 2! = 1 * 2 = 2\
 3! = 1 * 2 * 3 = 6\
 ...\
 7! = 1 * 2 ... * 7 = 5040_
 */
/*:
 
 - Note: üëÜ _–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∫—É—Ä—Å–∏—é_
*/
/*:
 - Example: üòâ\
 _Function Call:_\
 factorial(5)\
 _Output:_\
 5! = 120
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func factorial(n: Int) -> Int {
    
    if n == 0 {
        return 1
    }
    return n * factorial(n: n - 1)
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 6
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
 - –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π —Ç–æ–ª—å–∫–æ  –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
 - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
*/
/*:
 - Example: üòâ\
 _Function Call:_\
 filterDigitLength([88, 232, 4, 9721, 555], 3)\
 _Output:_\
[232, 555]
 */
/*:
 - Example: üòâ\
 _Function Call:_\
 filterDigitLength([32, 88, 74, 91, 300, 4050], 1)\
 _Output:_\
[]
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func filterDigitLength(array: [UInt], n: Int) {
    var resultArray = [Int]()
    let mappedArray = array.map{String($0)}
    mappedArray.forEach{
        
        if $0.count == n {
            guard let value = Int($0) else { return }
            resultArray.append(value)
        }
    }
    print(resultArray)
}

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 7
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
 - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
*/
/*:
 - Example: üòâ\
 _Function Call:_\
 getExtension(["code.html", "code.css"])\
 _Output:_\
["html", "css"]
*/
/*:
 - Example: üòâ\
 _Function Call:_\
 getExtension(["project1.jpg", "project1.pdf", "project1.mp3", "project2.pdf"])\
 _Output:_\
["jpg", "pdf", "mp3"]
 */
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func getExtension(arrayStrings: [String]) -> [String] {
    let resultArray: [String] = arrayStrings.map {
        var valueArray = $0.components(separatedBy: ".")
        valueArray.removeFirst()
        return valueArray.first ?? "...."
    }
    return resultArray
}
print(getExtension(arrayStrings: ["project1.dock", "project", "project1.mp3", "project2.pdf"]))
/*:
---
### –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å:
#### –ó–∞–¥–∞–Ω–∏–µ 8:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Note: üëÜ _–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ - —ç—Ç–æ –≥—Ä–∞–Ω–∏—Ü—ã —á–∏—Å–ª–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç—Å—É—Ç—Å–≤—É—é—â–∏—Ö —á–∏—Å–µ–ª_
*/
/*:
- Example: üòâ\
_Function Call:_\
sumOfMissingNumbers([1, 3, 5, 7, 10])\
_Output:_\
Sum of missing numbers = 29
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func sumOfMissingNumbersFunc(array: [UInt]) -> UInt {

    guard var min = array.min() else { return 0 }
    guard let max = array.max() else {return 0}
    var rez: UInt = 0
    let array = array

    while max > min {

        if !array.contains(min) {
            rez += min
        }

        min += 1
    }

    return rez
}
var sumOfMissingNumbers = sumOfMissingNumbersFunc(array: [1, 3, 5, 7, 10])
print(sumOfMissingNumbers)
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 9:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç—Ä–æ–∫—É, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –Ω–æ–≤–∫—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–æ–ª–æ–≤–∞ –Ω–∞  +1.
 - –ö–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–¥–µ–ª–∏ –∫–∞–∫–∏–º-—Ç–æ –∑–Ω–∞–∫–æ–º.
 - –ö–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (a-z, A-Z)_
*/
/*:
- Example: üòâ\
_Function Call:_\
compoutingLetters("abcd")\
_Output:_\
"A-Bb-Cccc=Dddd"
*/
// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func addLittersAndPrintTheResult(string: String) {
    
    var newString = ""
    let elementsArray = ["-", "=", "+"]
    
    string.forEach {
        let randomElement = arc4random_uniform(UInt32(elementsArray.count))
        newString.append($0.uppercased())
        $0.uppercased()
        newString.append($0)
        newString.append(elementsArray[Int(randomElement)])
    }
    
    newString.removeLast()
    print(newString)
}
addLittersAndPrintTheResult(string: "abcd")
/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 10:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç  —Å—Ç—Ä–æ–∫–∞, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Note: üëÜ _–ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞_
*/
/*:
- Example: üòâ\
_Function Call:_\
makeTitile("This is a title")\
_Output:_\
This Is A Title
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func makeUppearcasedAndPrint(_ string: String) {
    let result = string.split(separator: " ").map { $0.capitalized }.joined(separator: " ")
    print(result)
    
}

makeUppearcasedAndPrint("This is array")

/*:
---
#### –ó–∞–¥–∞–Ω–∏–µ 11:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞.
 - –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–∏–º–≤–æ–ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Example: üòâ\
_Function Call:_\
letterCount(["D", "E", "Y", "H", "A", "D"])\
_Output:_\
D shows 2 times
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func charInArray(array: [String], char: String) {
    var counter = 0
    
    array.forEach{ if $0 == char { counter += 1}}
    print("\(char) shows \(counter) times")
}
/*:
---
## –ó–∞–¥–∞–Ω–∏–µ 12:
 - –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ, –ø—Ä–∏–Ω–∞–¥–æ–µ–∂–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤—É, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∞ false  - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 - –í—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
*/
/*:
- Example: üòâ\
_Function Call:_\
validateSubsets([[1, 2], [2, 3], [1, 3]], [1, 2, 3])\
_Output:_\
True
*/
/*:
- Example: üòâ\
_Function Call:_\
validateSubsets([[1, 2, 3, 4]], [1, 2, 3])\
_Output:_\
False
*/

// –î–æ–±–∞–≤—å –∫–æ–¥ —Å—é–¥–∞:
func validateSubsets(superset: Set<Int>, of: [Set<Int>]) -> Bool {
    
    for item in of {
        if !item.isSubset(of: superset) {
            return false
        }
    }
    return true
}

let set: [Set<Int>] = [[1, 2], [2, 3], [1, 3], [1, 2, 3]]
let superset: Set<Int> = [4,5,6]

print(validateSubsets(superset: superset, of: set))
//: [–ù–∞–∑–∞–¥: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º](@previous)  |  –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6  |  [–í–ø–µ—Ä–µ–¥: –ó–∞–º—ã–∫–∞–Ω–∏—è](@next)



